import React, { useState } from 'react';
import { CheckCircle } from 'lucide-react';
import Legend from '../components/Legend';

const SeatSelection = () => {
  // Define initial booked seats from dummy data
  const initialBooked = ['A1', 'A2', 'B5', 'C1', 'C2'];
  const [selectedSeats, setSelectedSeats] = useState([]);
  const [bookedSeats, setBookedSeats] = useState(initialBooked);
  const [showSuccess, setShowSuccess] = useState(false);

  // Seating layout config: Each row and how many seats it has
  const layout = {
    Zone1: {
      A: 10, B: 10, C: 9, D: 9, E: 8, F: 8, G: 8, H: 7,  I:7,
    },
    Zone2: {
        A: 20, B: 20, C: 20, D: 18, E: 18, F: 18, G: 16, H: 16,  I:16,
    },
    Zone3: {
        A: 10, B: 10, C: 9, D: 9, E: 8, F: 8, G: 8, H: 7,  I:7,
    },
  };

  const toggleSeat = (seat) => {
    if (bookedSeats.includes(seat)) return;
    setSelectedSeats((prev) =>
      prev.includes(seat) ? prev.filter((s) => s !== seat) : [...prev, seat]
    );
  };

  const confirmBooking = () => {
    setBookedSeats([...bookedSeats, ...selectedSeats]);
    setSelectedSeats([]);
    setShowSuccess(true);
    setTimeout(() => setShowSuccess(false), 2000);
  };

  const renderSeats = (zone) =>
    Object.entries(layout[zone]).map(([row, count]) => {
      const startNumber = zone === 'Zone2' ? 11 : zone === 'Zone3' ? 31 : 1;
  
      return (
        <div key={`${zone}-${row}`} className="flex items-center gap-2 mb-2">
          <span className="w-6">{row}</span>
          <div className="flex flex-wrap gap-1">
            {Array.from({ length: count }, (_, i) => {
              const seatNumber = startNumber + i;
              const seat = `${row}${seatNumber}`;
              const isBooked = bookedSeats.includes(seat);
              const isSelected = selectedSeats.includes(seat);
  
              return (
                <button
                  key={seat}
                  disabled={isBooked}
                  onClick={() => toggleSeat(seat)}
                  className={`w-8 h-8 text-sm rounded flex items-center justify-center border
                    ${
                      isBooked
                        ? 'bg-red-500 text-white cursor-not-allowed'
                        : isSelected
                        ? 'bg-yellow-500 text-white'
                        : 'bg-green-500 text-white hover:bg-green-400'
                    }`}
                >
                  {seatNumber}
                </button>
              );
            })}
          </div>
        </div>
      );
    });
  

  return (
    <div className="p-6 ml-60 max-w-5xl">
        <Legend/>
      <h2 className="text-2xl font-bold mb-4">Seat Selection</h2>

      {/* ZONES */}
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">ZONE-1</h3>
        {renderSeats('Zone1')}
      </div>
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">ZONE-2</h3>
        {renderSeats('Zone2')}
      </div>
      <div className="mb-6">
        <h3 className="text-lg font-semibold mb-2">ZONE-3</h3>
        {renderSeats('Zone3')}
      </div>

      {/* Confirm Button */}
      {selectedSeats.length > 0 && (
        <button
          onClick={confirmBooking}
          className="bg-indigo-600 text-white px-4 py-2 rounded hover:bg-indigo-700"
        >
          Confirm ({selectedSeats.length} seat{selectedSeats.length > 1 ? 's' : ''})
        </button>
      )}

      {/* Success Popup */}
      {showSuccess && (
        <div className="mt-4 flex items-center gap-2 text-green-600 bg-green-100 px-4 py-2 rounded shadow w-fit">
          <CheckCircle size={20} />
          <span>Seats booked successfully!</span>
        </div>
      )}
    </div>
  );
};

export default SeatSelection;
